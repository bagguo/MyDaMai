package com.bagguo.mydamai.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bagguo.mydamai.ui.topic.FeedArticleBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEED_ARTICLE_BEAN".
*/
public class FeedArticleBeanDao extends AbstractDao<FeedArticleBean, Long> {

    public static final String TABLENAME = "FEED_ARTICLE_BEAN";

    /**
     * Properties of entity FeedArticleBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property ApkLink = new Property(3, String.class, "apkLink", false, "APK_LINK");
        public final static Property Audit = new Property(4, int.class, "audit", false, "AUDIT");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(6, String.class, "link", false, "LINK");
        public final static Property NiceDate = new Property(7, String.class, "niceDate", false, "NICE_DATE");
    }


    public FeedArticleBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FeedArticleBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEED_ARTICLE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" TEXT," + // 1: key
                "\"TIME\" INTEGER," + // 2: time
                "\"APK_LINK\" TEXT," + // 3: apkLink
                "\"AUDIT\" INTEGER NOT NULL ," + // 4: audit
                "\"TITLE\" TEXT," + // 5: title
                "\"LINK\" TEXT," + // 6: link
                "\"NICE_DATE\" TEXT);"); // 7: niceDate
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_FEED_ARTICLE_BEAN_KEY ON \"FEED_ARTICLE_BEAN\"" +
                " (\"KEY\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEED_ARTICLE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FeedArticleBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String apkLink = entity.getApkLink();
        if (apkLink != null) {
            stmt.bindString(4, apkLink);
        }
        stmt.bindLong(5, entity.getAudit());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(7, link);
        }
 
        String niceDate = entity.getNiceDate();
        if (niceDate != null) {
            stmt.bindString(8, niceDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FeedArticleBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String apkLink = entity.getApkLink();
        if (apkLink != null) {
            stmt.bindString(4, apkLink);
        }
        stmt.bindLong(5, entity.getAudit());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(7, link);
        }
 
        String niceDate = entity.getNiceDate();
        if (niceDate != null) {
            stmt.bindString(8, niceDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FeedArticleBean readEntity(Cursor cursor, int offset) {
        FeedArticleBean entity = new FeedArticleBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apkLink
            cursor.getInt(offset + 4), // audit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // link
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // niceDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FeedArticleBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setApkLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAudit(cursor.getInt(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNiceDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FeedArticleBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FeedArticleBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FeedArticleBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
